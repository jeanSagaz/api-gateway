trigger:
- main

resources:
- repo: self

variables:
- group: k8s
- name: dockerRegistryServiceConnection
  value: '$[variables.dockerRegistry]'
- name: containerRegistry
  value: '$[variables.container]'
- name: imagePullSecret
  value: '$[variables.pullSecret]'
- name: kubernetesServiceConnection
  value: '$[variables.serviceConnection]'
- name: dockerRegistryEndpoint
  value: '$[variables.registryEndpoint]'
- name: tag
  value: '$(Build.BuildId)'  
- name: imageGatewayRepository
  value: 'api_gateway'
- name: imageAuthRepository
  value: 'authentication_api'
- name: dockerfileGatewayPath
  value: '$(Build.SourcesDirectory)/src/OcelotApiGateway/Dockerfile'
- name: dockerfileAuthPath
  value: '$(Build.SourcesDirectory)/src/ApiAuthentication/Dockerfile'
  # Agent VM image name
- name: vmImageName
  value: 'ubuntu-latest'
- name: User.Password
  value: '$[variables.password]'

stages:
- stage: Build
  displayName: Build Image
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:    
    - bash: |
        cat $(Build.SourcesDirectory)/src/ApiAuthentication/appsettings.Production.json
      displayName: 'Print JSON before Variable substitution'
    - task: FileTransform@2
      displayName: 'Variable substitution for JSON'
      inputs:
        # folderPath: '$(System.DefaultWorkingDirectory)/**/*.zip'
        folderPath: ''
        xmlTransformationRules: ''
        jsonTargetFiles: 'src/ApiAuthentication/appsettings.Production.json'

    - bash: |
        cat $(Build.SourcesDirectory)/src/ApiAuthentication/appsettings.Production.json
      displayName: 'Print JSON after Variable substitution'

    - task: Docker@2
      displayName: Build and publish '$(imageGatewayRepository)' image to Azure Container Registry
      inputs:
        containerRegistry: $(dockerRegistryServiceConnection)
        repository: '$(imageGatewayRepository)'
        command: 'buildAndPush'
        Dockerfile: $(dockerfileGatewayPath)
        tags: |
          $(tag)
    - task: Docker@2
      displayName: Build and publish '$(imageAuthRepository)' image to Azure Container Registry
      inputs:
        containerRegistry: $(dockerRegistryServiceConnection)
        repository: '$(imageAuthRepository)'
        command: 'buildAndPush'
        Dockerfile: $(dockerfileAuthPath)
        tags: |
          $(tag)
    - task: PublishPipelineArtifact@1
      displayName: Publish Pipeline Artifact
      inputs:
        artifactName: 'manifests'
        path: 'manifests'

- stage: Deploy
  displayName: Deploy to Prod
  dependsOn: Build
  variables:
    acrsecret: $(imagePullSecret)
  jobs:
  - job: Deploy
    displayName: Deploy to AKS
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'manifests'
        targetPath: '$(System.ArtifactsDirectory)/manifests'
    - task: KubernetesManifest@1
      inputs:
        action: 'createSecret'
        connectionType: 'kubernetesServiceConnection'
        kubernetesServiceConnection: $(kubernetesServiceConnection)
        namespace: 'default'
        secretType: 'dockerRegistry'
        secretName: '$(acrsecret)'
        dockerRegistryEndpoint: $(dockerRegistryEndpoint)
    - task: KubernetesManifest@1
      displayName: Deploy to Kubernetes cluster      
      inputs:
        action: deploy
        namespace: 'default'
        connectionType: 'kubernetesServiceConnection'
        kubernetesServiceConnection: $(kubernetesServiceConnection)
        manifests: |
          $(System.ArtifactsDirectory)/manifests/deployment.yml
          $(System.ArtifactsDirectory)/manifests/service.yml
        containers: |
          $(containerRegistry)/$(imageGatewayRepository):$(tag)
          $(containerRegistry)/$(imageAuthRepository):$(tag)
        imagePullSecrets: |
          $(imagePullSecret)